#include "VolumetricInteractionCompute.cginc"

#pragma kernel brute_force
[numthreads(8,8,8)]
void brute_force (const uint3 id : SV_DispatchThreadID)
{
    // Calculate interaction value based on line segment approach.
    const float4 new_value = calculate_interaction_line(pixel_to_world(id));

    // Edge pixels are blank so that repeating the texture doesn't actually draw it.
    // if (id.x == 0 || id.x == resolution.x - 1 || id.y == 0 || id.y == resolution.y - 1 || id.z == 0 || id.z == resolution.z - 1)
    //     new_value = float4(0, 0, 0, 0);

    current[id] = new_value;
}

#pragma kernel sentinel
[numthreads(8,8,8)]
void sentinel (const uint3 id : SV_DispatchThreadID)
{
    current[id] = float4(0, 0, 0, 0);
}

#pragma kernel seeding
[numthreads(1,1,1)]
void seeding (const uint3 id : SV_DispatchThreadID)
{    
    // STEP 1. Convert seed from world -> local -> uv -> pixel.
    const float3 world = buffer[id.x].position;
    const float3 local = mul(volume_world_to_local, float4(world, 1));
    const float3 uv = local.xyz + 0.5;
    const float3 pixel = floor(uv * resolution);

    // STEP 2. Set pixel at coordinate in result to seed uv.
    current[pixel] = float4(uv, buffer[id.x].radius / radius_multiplier);
}

#pragma kernel jump_flooding
[numthreads(8,8,8)]
void jump_flooding (const uint3 id : SV_DispatchThreadID)
{
    const float3 uv = id.xyz / float3(resolution - 1);
    const float3 pixel_world = uv_to_world(uv);
    
    float4 output = float4(0, 0, 0, 0);
    float max_strength = 0;
    
    for (int i = 0; i < 27; i++)
    {
        const int3 offset = offsets[i];
        const int3 neighbour_id = id + offset * step_size;

        if (current[neighbour_id].a <= 0)
            continue;

        const float3 world_position = uv_to_world(current[neighbour_id].xyz);
        
        const float strength = 1 - saturate(
            distance(pixel_world, world_position)
            / (current[neighbour_id].w * radius_multiplier)
            );
        
        if (strength > max_strength)
        {
            max_strength = strength;
            output = float4(current[neighbour_id]);
        }
    }

    current[id] = output;
}

#pragma kernel conversion
[numthreads(8,8,8)]
void conversion (const uint3 id : SV_DispatchThreadID)
{
    // STEP 1. Convert pixel to world space (pixel to world).
    const float3 pixel_world = pixel_to_world(id);

    // STEP 2. Convert seed position to world space (uv to world).
    const float3 seed_world = uv_to_world(current[id].xyz);

    // STEP 3. Calculate direction to seed.
    const float3 to_seed = (normalize(seed_world - pixel_world) + 1) / 2;

    // STEP 4. Calculate strength of seed.
    const float strength = 1.0 - saturate(distance(pixel_world, seed_world) / (current[id].w * radius_multiplier));

    // STEP 5. Write to texture.
    current[id] = float4(to_seed, strength);
}

#pragma kernel decay
[numthreads(8,8,8)]
void decay (const uint3 id : SV_DispatchThreadID)
{
    previous[id] = float4(previous[id].xyz, move_towards(previous[id.xyz].a, 0, decay_speed * delta));
}

#pragma kernel blending
[numthreads(8,8,8)]
void blending (const uint3 id : SV_DispatchThreadID)
{
    const float4 previous_value = previous[id];
    const float4 new_value = current[id];
    
    current[id] = blend_interaction(previous_value, new_value);
}